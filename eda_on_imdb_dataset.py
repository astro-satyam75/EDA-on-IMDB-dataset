# -*- coding: utf-8 -*-
"""EDA on IMDB Dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ci_PvTcZz57YeUoQ5YwOF_Jm1BFJ3Uil

## You have been hired by a rookie movie producer to help him decide what type of movies to produce and which actors to cast. You have to back your recommendations based on thorough analysis of the data he shared with you which has the list of 3000 movies and the corresponding details.

## As a data scientist, you have to first explore the data and check its sanity.

## Further, you have to answer the following questions:
1. ### <b> Which movie made the highest profit? Who were its producer and director? Identify the actors in that film.</b>
2. ### <b>This data has information about movies made in different languages. Which language has the highest average ROI (return on investment)? </b>
3. ### <b> Find out the unique genres of movies in this dataset.</b>
4. ### <b> Make a table of all the producers and directors of each movie. Find the top 3 producers who have produced movies with the highest average RoI? </b>
5. ### <b> Which actor has acted in the most number of movies? Deep dive into the movies, genres and profits corresponding to this actor. </b>
6. ### <b>Top 3 directors prefer which actors the most? </b>

# Data Exploration
"""

#Import package
import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Almabetter/Modules/Python for Data Science/Guided Projects/EDA on IMDB data/imdb_data - imdb_data.csv')

df.head()

df.info()

# Dropping unequired columns

df1 = df.loc[:,['id','budget','genres','imdb_id', 'original_language','original_title','popularity','cast','crew','revenue']]

df1.dropna(inplace = True)

"""**Converting string values of the cast,crew, genre to dictionary. Dataset has them as string to expolit the immutable nature of the string and prevent damage to data.**"""

def string_to_dict(str):
  return eval(str)

#Another way to do this:
'''df1.loc[~df1['cast'].isna(),'cast']= df1.loc[~df1['cast'].isna(),'cast'].apply(string_to_dict)
df1.loc[~df1['crew'].isna(),'crew']= df1.loc[~df1['crew'].isna(),'crew'].apply(string_to_dict)
df1.loc[~df1['genres'].isna(),'genres']= df1.loc[~df1['genres'].isna(),'genres'].apply(string_to_dict)'''

df1['cast'] = df1['cast'].apply(string_to_dict)
df1['crew'] = df1['crew'].apply(string_to_dict)
df1['genres'] = df1['genres'].apply(string_to_dict)

"""<h2>Which movie made the highest profit? Who were its producer and director? Identify the actors in that film.</h2>"""

df1[['original_title','budget','revenue']]

df1.describe()

# Replacing with median value rows where budget and revenue is less than 1000 
df1.loc[df1['budget'] < 1000,'budget'] = df1.loc[df1['budget'] >= 1000,'budget'].median()
df1.loc[df1['revenue'] < 1000,'revenue'] = df1.loc[df1['revenue'] >= 1000,'revenue'].median()

#Calculating profit
df1['profit'] = df1['revenue'] - df1['budget']

# TITLE OF THE HIGHEST EARNING MOVIE

highest_profit_movie = df1[df1['profit'] == df1['profit'].max()]
highest_profit_movie.iloc[0]['original_title']

# PRODUCERS AND DIRECTORS IN THE HIGHEST GROSSING MOVIE

crew_list = highest_profit_movie.iloc[0]['crew']
crew_list[0]

for crew_name in crew_list:
  if crew_name['job'] == 'Producer':
    print(crew_name['name'],'as',crew_name['job'])
  if crew_name['job'] == 'Director':
    print(crew_name['name'],'as',crew_name['job'])

# ACTORS IN THE HIGHEST GROSSING MOVIE


cast_list = highest_profit_movie.iloc[0]['cast']
cast_list[0]

for actor_name in cast_list:
  print(actor_name['name'],'starring as',actor_name['character'])

"""###Language with the highest average ROI (return on investment)?"""

#Calculating ROI

df1['ROI'] = 100 * (df1['profit']/df1['budget'])

roi_language = df1.groupby(['original_language'])['ROI'].mean().reset_index()
highest_roi_language = roi_language[roi_language['ROI'] == roi_language['ROI'].max()]
highest_roi_language.iloc[0]['original_language']

"""###Find out the unique genres of movies in this dataset"""

x = []
for i in df1['genres']:
  x.extend(i)


genre = pd.Series(x)

new_genres_list = []
for genre_name in genre:
  new_genres_list.append(genre_name['name'])

set(pd.Series(new_genres_list).unique())

"""###Table of all the producers and directors of each movie and the top 3 producers who have produced movies with the highest average RoI"""

def producers_and_directors(crew_list):
  try:
    producers = []
    directors = []

    for i in crew_list:
      if i['job'] == 'Producer':
        producers.append(i['name'])
      if i['job'] == 'Director':
        directors.append(i['name'])

    return producers,directors
    
  except:
    return [],[]

# Created two new columns of producers and directors and expanded the list as some movies have more than one producers
df1[['producer','director']] = df1.apply(lambda x : producers_and_directors(x['crew']),axis = 1, result_type = 'expand')

dfpd = df1[['original_title','producer','director','ROI']]
dfpd.head()

# producers_with_highest_avg_roi = dfpd.groupby(['producer'])['ROI'].mean()
# producers_with_highest_avg_roi
producers_exp = dfpd.explode('producer').sort_values('producer',ascending = True)
producers_exp

producers_with_highest_avg_roi = pd.DataFrame(producers_exp.groupby(['producer'])['ROI'].mean())
producers_with_highest_avg_roi.sort_values('ROI',ascending = False)[0:3]

"""### Actor who has acted in the most number of movies. Deep dive into the movies, genres and profits corresponding to this actor."""

def actor(cast_list):
    actor_name = []
    for i in cast_list:
      actor_name.append(i['name'])
    return actor_name

df1['actors_appearing'] = df1.apply(lambda x : actor(x['cast']),axis = 1)

list_of_actors = []

for k in df1['actors_appearing']:
  list_of_actors.extend(k)

series_of_actors = pd.Series(list_of_actors)
series_of_actors.value_counts()

import ast

df1['new_genre_list'] = df1.apply(lambda x : actor(x['genres']),axis = 1)

df_actors = df1.explode('actors_appearing')

grouped_actors = df_actors.groupby('actors_appearing').agg({'new_genre_list':'sum','profit':'mean'}).reset_index()
grouped_actors.loc[(grouped_actors.actors_appearing=='Robert De Niro') | (grouped_actors.actors_appearing=='Samuel L. Jackson') | (grouped_actors.actors_appearing=='Morgan Freeman')].rename({'profit':'mean_profit'},axis=1)

"""### Top 3 directors prefer which actors the most?"""

df_pop_directors = df1.explode('director')


pop_directors = df_pop_directors.groupby('director')['popularity'].mean().sort_values(ascending = False).reset_index()
pop_directors.head(3)

tim_miller = list(df_pop_directors[df_pop_directors['director'] == pop_directors['director'][0]]['actors_appearing'])[0]
james_gunn = list(df_pop_directors[df_pop_directors['director'] == pop_directors['director'][1]]['actors_appearing'])[0]
edgar_wright = list(df_pop_directors[df_pop_directors['director'] == pop_directors['director'][2]]['actors_appearing'])[0]

# ACTORS OF CHOICE BY TIM MILLER
tim_miller

# ACTORS OF CHOICE BY JAMES GUNN
james_gunn

# ACTORS OF CHOICE BY EDGAR WRIGHT
edgar_wright